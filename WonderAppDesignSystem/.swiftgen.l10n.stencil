// swiftlint:disable all
{% if tables.count > 0 %}
import SwiftUI

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    {% if type == "String" %}
    _ p{{forloop.counter}}: Any
    {% else %}
    _ p{{forloop.counter}}: {{type}}
    {% endif %}
    {{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    {% if type == "String" %}
    String(describing: p{{forloop.counter}})
    {% elif type == "UnsafeRawPointer" %}
    Int(bitPattern: p{{forloop.counter}})
    {% else %}
    p{{forloop.counter}}
    {% endif %}
    {{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item className %}
  {% for string in item.strings %}
  {% if not param.noComments %}
  /// {{string.translation}}
  {% endif %}
  {% if string.types %}
  public func {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> {{className}} {
    return {{className}}(key: "{{string.key}}", {% call argumentsBlock string.types %})
  }
  {% else %}
  public let {{string.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{className}}(key: "{{string.key}}")
  {% endif %}
  {% endfor %}
  {% for child in item.children %}
  public enum {{child.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call recursiveBlock table child className %}{% endfilter %}
  }
  {% endfor %}
{% endmacro %}

public extension AttributedString {
  static let l10n: L10nAttributedString = .init()
}

public struct L10nAttributedString {
  {% if tables.count > 1 or param.forceFileNameEnum %}
    {% for table in tables %}
    public enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
      {% filter indent:2 %}{% call recursiveBlock table.name table.levels "AttributedString" %}{% endfilter %}
    }
    {% endfor %}
    {% else %}
    {% call recursiveBlock tables.first.name tables.first.levels "AttributedString" %}
    {% endif %}
}

public struct L10nString {
  {% if tables.count > 1 or param.forceFileNameEnum %}
  {% for table in tables %}
  public enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call recursiveBlock table.name table.levels "String" %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock tables.first.name tables.first.levels "String" %}
  {% endif %}
}

public extension String {
  static let l10n: L10nString = .init()
}

// MARK: - Implementation Details

enum ColorAttribute: CodableAttributedStringKey, MarkdownDecodableAttributedStringKey {
  typealias Value = String
  static var name: String = "color"
}

extension AttributeScopes {
    struct ColorAttributeScope: AttributeScope {
        let color: ColorAttribute
    }
    
    var color: ColorAttributeScope.Type { ColorAttributeScope.self }
}

extension AttributeDynamicLookup {
    subscript<T: AttributedStringKey>(dynamicMember keyPath: KeyPath<AttributeScopes.ColorAttributeScope, T>) -> T {
        self[T.self]
    }
}

private extension AttributedString {
    init(key: String, _ args: CVarArg...) {
        let format = BundleToken.bundle.localizedString(forKey: key,
                                                        value: nil,
                                                        table: "Localizable")
        let formattedValue = String(format: format,
                                    locale: Locale.current,
                                    arguments: args)

        do {
            let options = AttributedString.MarkdownParsingOptions(allowsExtendedAttributes: true,
                                                                  interpretedSyntax: .full,
                                                                  failurePolicy: .throwError)
            var value = try AttributedString(markdown: formattedValue,
                                             including: \.color,
                                             options: options)

            for run in value.runs {
                guard let colorAssetName = run.color else { continue }
                value[run.range].foregroundColor = Color(colorAssetName, bundle: BundleToken.bundle)
            }
            
            self = value
        } catch {
            assertionFailure(error.localizedDescription)
            self.init(formattedValue)
        }
    }
}

private extension String {
  init(key: String, _ args: CVarArg...) {
    let format = BundleToken.bundle.localizedString(forKey: key,
                                                    value: nil,
                                                    table: "Localizable")
    self.init(format: format,
              locale: Locale.current,
              arguments: args)
  }
}
{% if not param.bundle %}

private final class BundleToken {
  static let bundle: Bundle = {
    #if SWIFT_PACKAGE
      return Bundle.module
    #else
      return Bundle(for: BundleToken.self)
    #endif
  }()
}
{% endif %}
{% else %}
// No string found
{% endif %}
